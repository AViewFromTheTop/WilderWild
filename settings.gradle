import java.nio.file.Files

pluginManagement {
    repositories {
		maven {
			name = 'Quilt'
			url = 'https://maven.quiltmc.org/repository/release/'
		}
		maven {
			name = 'Quilt Snapshot'
			url = 'https://maven.quiltmc.org/repository/snapshot/'
		}
		maven {
			name = 'Fabric'
			url = 'https://maven.fabricmc.net/'
		}
		jcenter()
		maven {
			name = "Forge"
			url = "https://files.minecraftforge.net/maven/"
		}
		maven {
			name = "Jitpack"
			url 'https://jitpack.io/'
		}
        mavenCentral()
        gradlePluginPortal()
    }
}

rootProject.name = "Wilder Wild"

// EXTERNAL PROJECTS
//externalProject("FrozenLib", true, "FrozenLib")
includeBuild('../FrozenLib') {
	dependencySubstitution {
		substitute module('net.frozenblock:FrozenLib') using project(':')
	}
}


def externalProject(String externalProject, boolean shouldInclude, String includeProject) {
	if (shouldInclude) {
		include(includeProject)
	}

	def moduleProject = project(":$externalProject")
	moduleProject.projectDir = file("../$externalProject")

	rootProject.projectDir.toPath().resolve("../$externalProject/").toFile().listFiles().each {
		// Is the project disabled?
		if (it.isDirectory()
				//&& it.name != "src" // Ignore sources
				&& it.name != "build" // Ignore build artifacts
				&& !it.name.startsWith(".") // Ignore anything hidden on unix-like OSes
		) {
			// Libraries can be disabled by adding a file named DISABLE at the root of its directory
			if (Files.exists(it.toPath().resolve("build.gradle")) && Files.notExists(it.toPath().resolve("DISABLE"))) {
				include "$externalProject:$it.name"
			}
		}
	}
}

/*def allowLocalFrozenLibUse = true
def allowFrozenLibInConsoleMode = true
def FrozenLibPath = '../FrozenLib'
def FrozenLibPathGitHub = '../WilderWild/FrozenLib'

def isIDE = properties.containsKey('android.injected.invoked.from.ide')
        || (System.getenv("XPC_SERVICE_NAME") ?: "").contains("intellij")
        || (System.getenv("XPC_SERVICE_NAME") ?: "").contains(".idea")
        || System.getenv("IDEA_INITIAL_DIRECTORY") != null

def FrozenLibFolder = new File(FrozenLibPath)
def FrozenLibFolderGitHub = new File(FrozenLibPathGitHub)
if (allowLocalFrozenLibUse && (isIDE || allowFrozenLibInConsoleMode) && FrozenLibFolder.exists()) {

    include ':FrozenLib'
    project(":FrozenLib").projectDir = FrozenLibFolder
    project(':FrozenLib').buildFileName = './build.gradle'
} else if (allowLocalFrozenLibUse && (isIDE || allowFrozenLibInConsoleMode) && FrozenLibFolderGitHub.exists()) {

    include ':FrozenLib'
    project(":FrozenLib").projectDir = FrozenLibFolderGitHub
    project(':FrozenLib').buildFileName = './build.gradle'
}
*/
