pluginManagement {
    repositories {
        maven {
            name = 'Quilt'
            url = 'https://maven.quiltmc.org/repository/release'
        }
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
        maven {
            name = "Architectury"
            url = "https://maven.architectury.dev/"
        }
        maven {
            name = "Forge"
            url = "https://maven.minecraftforge.net/"
        }
        mavenCentral()
        gradlePluginPortal()
    }
}

include("common")
include("fabric")
include("quilt")
include("forge")

rootProject.name = "Wilder Wild"


def allowLocalFrozenLibUse = true
def allowFrozenLibInConsoleMode = true
def FrozenLibPath = '../FrozenLib'
def FrozenLibPathGitHub = '../WilderWild/FrozenLib'

def isIDE = properties.containsKey('android.injected.invoked.from.ide')
        || (System.getenv("XPC_SERVICE_NAME") ?: "").contains("intellij")
        || (System.getenv("XPC_SERVICE_NAME") ?: "").contains(".idea")
        || System.getenv("IDEA_INITIAL_DIRECTORY") != null

def FrozenLibFolder = new File(FrozenLibPath)
def FrozenLibFolderGitHub = new File(FrozenLibPathGitHub)
if (allowLocalFrozenLibUse && (isIDE || allowFrozenLibInConsoleMode) && FrozenLibFolder.exists()) {

    include ':FrozenLib'
    project(":FrozenLib").projectDir = FrozenLibFolder
    project(':FrozenLib').buildFileName = './build.gradle'
    include ':FrozenLib:common'
} else if (allowLocalFrozenLibUse && (isIDE || allowFrozenLibInConsoleMode) && FrozenLibFolderGitHub.exists()) {

    include ':FrozenLib'
    project(":FrozenLib").projectDir = FrozenLibFolderGitHub
    project(':FrozenLib').buildFileName = './build.gradle'
}